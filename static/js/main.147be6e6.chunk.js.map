{"version":3,"sources":["Table.js","Loader/Loader.js","PersonInfo/PersonInfo.js","ArraySelected/ArraySelected.js","Search/search.js","AddingPerson/addingPerson.js","ChoosePageSize/choosePageSize.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","props","onClick","e","onSort","sortKey","sort","TableBody","characterData","rows","person","push","showCharacter","bind","key","id","phone","firstName","lastName","email","console","log","Table","className","address","state","city","streetAddress","zip","value","description","chooseArray","useState","setValue","onSearch","type","placeholder","onChange","event","target","for","autoFocus","style","float","autofocus","document","getElementById","keyUser","setNewPerson","handleChangePageSize","App","data","isSorted","sorted","Object","keys","item","direction","sortType","dataSort","a","b","setState","index","config","isArraySelected","isLoading","loadData","pageChange","selected","currentPage","search","pageSize","personality","url","array32","array1000","this","filter","toString","includes","toLowerCase","ArraySelected","parseData","getParsedData","pageCount","Math","ceil","length","selectedData","_","chunk","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","currPage","Fragment","PersonInfo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render"],"mappings":"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","file":"static/js/main.147be6e6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport styles from './table.css';\r\n\r\n\r\n\t\t//adding onClick function to perform sorting option and text labeling about sort direction\r\nconst TableHeader = (props) => {\r\n\treturn (\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<th onClick={e => props.onSort(e,'id')}>ID {props.sortKey === 'id' ? <small>{props.sort}</small>:null}</th>\r\n\t\t\t\t<th onClick={e => props.onSort(e,'firstName')} >First Name {props.sortKey === 'firstName' ? <small>{props.sort}</small>:null}</th>\r\n\t\t\t\t<th onClick={e => props.onSort(e,'lastName')} >Last Name {props.sortKey === 'lastName' ? <small>{props.sort}</small>:null}</th>\r\n\t\t\t\t<th onClick={e => props.onSort(e,'email')}>E-mail {props.sortKey === 'email' ? <small>{props.sort}</small>:null}</th>\r\n\t\t\t\t<th onClick={e => props.onSort(e,'phone')}>Phone {props.sortKey === 'phone' ? <small>{props.sort}</small>:null}</th>\r\n\t\t\t</tr>\r\n\t\t</thead>\r\n\t)\r\n}\r\n\r\n\r\n\r\nconst TableBody = (props) => {\r\n\t\t\t//adding option to each row to show person info through the showCharacter function\r\n\tif (props.characterData != null) {\r\n\t\tlet rows = []\r\n\t\t{/*props.characterData.map(item =>(\r\n\t\tconsole.log(item.id)))*/}\r\n\t\t\tfor (let person of props.characterData){\r\n\t\t\t\trows.push(<tr onClick={props.showCharacter.bind(null, person)} key={person.id+person.phone}>\r\n\t\t\t\t\t<td> {person.id}</td>\r\n\t\t\t\t\t<td> {person.firstName}</td>\r\n\t\t\t\t\t<td> {person.lastName}</td>\r\n\t\t\t\t\t<td> {person.email}</td>\r\n\t\t\t\t\t<td> {person.phone}</td>\r\n\t\t\t\t</tr>)\r\n\t\t\t}\r\n\t\r\n\treturn <tbody>{rows}</tbody>}\r\n\telse { \r\n\tconsole.log('nothing to show!')\r\n\treturn <tbody></tbody>}\r\n}\r\n\r\n\t\t//\r\nconst Table = (props) => {\r\n\r\n\tconst {characterData, onSort, showCharacter, sort, sortKey} = props;\t\r\n\treturn(\r\n\t\t<table className=\"fl-table\">\r\n\t\t\t<TableHeader onSort = {onSort} sort = {sort} sortKey = {sortKey} />\r\n\t\t\t<TableBody characterData = {characterData} showCharacter ={showCharacter}/>\r\n\t\t</table>\r\n\t\t\r\n\t)\r\n}\r\n\r\n\r\nexport default Table","import React from 'react';\nimport styles from './Loader.css';\n\n\t\t//ready-made module from loading.io\nexport default () => <div className=\"lds-ring\" />\n","import React from 'react'\r\n\r\n\t\t//simple html structure to show person's detail info\r\nexport default ({person}) => {\r\nreturn (\r\n\t<div className = 'divPerson'>\r\n\t\r\n\t<dl>\r\n\t<dt>Контактная информация:</dt> \r\n\t<dd>{person.firstName + ' ' + person.lastName}</dd>\r\n\t\r\n\t<dt>E-mail:</dt> \r\n\t<dd>{person.email}</dd>\r\n\t\r\n\t<dt>Телефон:</dt> \r\n\t<dd>{person.phone}</dd>\r\n\t\r\n\t<dt>Штат:</dt> \r\n\t<dd>{person.address.state}</dd>\r\n\t\r\n\t<dt>Город:</dt> \r\n\t<dd>{person.address.city}</dd>\r\n\t\r\n\t<dt>Адрес проживания:</dt> \r\n\t<dd>{person.address.streetAddress}</dd>\r\n\t<dt>Индекс:</dt> \r\n\t<dd>{person.address.zip}</dd>\r\n\tОписание: <br />\r\n    <textarea value={person.description} />\r\n\t\r\n\t</dl>\r\n\t    \r\n  </div>\r\n)}\r\n\r\n","import React from 'react'\r\nimport styles from './arrayStyle.css'\r\n\r\n\t\t//let keyuser choose between two types of array and show two buttons\r\nexport default props => {\r\n\tconst array32 = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n\tconst array1000 = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\r\n\treturn (\r\n\t\t<div className = 'buttonHolderStyle'>\r\n\t\t\t<button onClick={()=> props.chooseArray(array32)} className = \"buttonStyle\">Маленький массив</button>\r\n\t\t\t<button onClick={()=> props.chooseArray(array1000)} className = \"buttonStyle\">Большой массив</button>\t\t\t\r\n\t\t</div>\r\n\t)\r\n}","import React, {useState} from 'react'\r\n\r\nexport default props => {\r\n\t\t\t//using react hook to perform \"state\" in non-class module\r\n    const [value, setValue] = useState('')\r\n    const valueChangeHandler = event => {\r\n        setValue(event.target.value)\r\n      }\r\n\r\n    return (\r\n        <div className=\"input-group mb-3 mt-3\" >\r\n             <div className=\"input-group-prepend\">\r\n                 <button \r\n                    className=\"btn btn-outline-secondary\"\r\n                    onClick={() => props.onSearch(value)} >Search</button>\r\n            </div>\r\n            <input \r\n                type=\"text\" \r\n\t\t\t\tplaceholder=\"Type here...\"\r\n                className=\"form-control\"\r\n                onChange={valueChangeHandler} \r\n                value={value}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\n\r\n\t\t//check if all inputs are not empty and update it through setNewPerson function\r\nexport default props => {\r\n    const [value, setValue] = useState(0);    \r\n\tconst checkIfNotNanAndAddHim = () => {\r\n\t\t\r\n\t\t if(document.getElementById('id_input').value!=='' &&\r\n\t\t\tdocument.getElementById('name_input').value!=='' &&\r\n\t\t\tdocument.getElementById('surname_input').value!=='' &&\r\n\t\t\tdocument.getElementById('email_input').value!=='' &&\r\n\t\t\tdocument.getElementById('phone_input').value!==''\t\t \r\n\t\t ){\r\n\t\t\tlet keyUser = {\r\n\t\t\t\tid:document.getElementById('id_input').value,\r\n\t\t\t\tfirstName:document.getElementById('name_input').value,\r\n\t\t\t\tlastName:document.getElementById('surname_input').value,\r\n\t\t\t\temail:document.getElementById('email_input').value,\r\n\t\t\t\tphone:document.getElementById('phone_input').value,\r\n\t\t\t\t\taddress: {streetAddress:'',\r\n\t\t\t\t\tcity:'',\r\n\t\t\t\t\tstate:'',\r\n\t\t\t\t\tzip:''},\r\n\t\t\t\t\tdescription:''\r\n\t\t\t };\r\n\t\t\tprops.setNewPerson(keyUser);\r\n\t\t\t\r\n\t\t\t\t\t//reset\r\n\t\t\tdocument.getElementById('id_input').value ='';\r\n\t\t\tdocument.getElementById('name_input').value ='';\r\n\t\t\tdocument.getElementById('surname_input').value ='';\r\n\t\t\tdocument.getElementById('email_input').value ='';\r\n\t\t\tdocument.getElementById('phone_input').value ='';\r\n\t\t }\t \r\n\t }\r\n\t\t\t//show only \"Add\" button or full form and button to add this person\r\n    return (\r\n\t\r\n\t\t!value?\r\n        <div className=\"input-group mb-3 mt-3\" >\r\n             <div className=\"input-group-prepend\">\r\n                 <button \r\n                    className=\"btn btn-outline-secondary\"\r\n                    onClick={() => setValue(1)} >Add person</button>\r\n            </div>            \r\n        </div>\r\n\t\t:\r\n\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t<fieldset>\r\n\t\t\t<div className = \"blockNewPerson\">\r\n\t\t\t<div id =\"columnLike\">\r\n\t\t\t\t<p><label for=\"name\" >ID <em>*</em></label>\r\n\t\t\t\t<input \r\n\t\t\t\t\tid = \"id_input\"\r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tclassName=\"button-control\"\r\n\t\t\t\t\tautoFocus = \"true\"\r\n\t\t\t\t/></p>\r\n\t\t\t</div>\r\n\t\t\t<div id =\"columnLike\">\r\n\t\t\t\t<p><label for=\"name\" style={{float:\"left\"}}>First and Last name <em>*</em></label>\r\n\t\t\t\t<input \r\n\t\t\t\t\tid = \"name_input\"\r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tclassName=\"button-control\"\r\n\t\t\t\t\tstyle={{float:\"left\"}}\r\n\t\t\t\t/>\r\n\t\t\t\t<input \r\n\t\t\t\t\tid = \"surname_input\"\r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tclassName=\"button-control\"\r\n\t\t\t\t\tautofocus = \"true\"\r\n\t\t\t\t\tstyle={{float:\"left\"}}\r\n\t\t\t\t/></p>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div id =\"columnLike\">\r\n\t\t\t\t<p><label for=\"name\" style={{float:\"left\"}}>Email <em>*</em></label>\r\n\t\t\t\t<input \r\n\t\t\t\t\tid = \"email_input\"\r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tclassName=\"button-control\"\r\n\t\t\t\t\tautofocus = \"true\"\r\n\t\t\t\t\tstyle={{float:\"left\"}}\r\n\t\t\t\t/></p>\r\n\t\t\t</div>\t\r\n\t\t\t\t\r\n\t\t\t<div id =\"columnLike\">\r\n\t\t\t\t<p><label for=\"name\" style={{float:\"left\"}}>Phone <em>*</em></label>\r\n\t\t\t\t<input \r\n\t\t\t\t\tid = \"phone_input\"\r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tclassName=\"button-control\"\r\n\t\t\t\t\tautofocus = \"true\"\r\n\t\t\t\t\tstyle={{float:\"left\"}} \r\n\t\t\t\t/></p>\r\n\t\t\t</div>\t\t\r\n\t\t\t<div className = \"btn_correct\" >\r\n\t\t\t\t\r\n\t\t\t\t <button \r\n                    className=\"btn btn-outline-secondary\"\r\n                    onClick={checkIfNotNanAndAddHim} >Add to list</button>\r\n\t\t\t</div>\t\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t\t</fieldset>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default (props) => {\r\n\treturn (\r\n\t<select value={props.value} onChange={(event)=>props.handleChangePageSize(event.target.value)}>\r\n\t\t<option value=\"5\">5</option>\r\n\t\t<option value=\"20\">20</option>\r\n\t\t<option value=\"50\">50</option>\r\n\t</select>)\r\n}","import React from 'react';\nimport './App.css';\n\nimport Table from './Table.js'\nimport Loader from './Loader/Loader.js';\nimport PersonInfo from './PersonInfo/PersonInfo.js'\nimport ArraySelected from './ArraySelected/ArraySelected.js'\nimport ReactPaginate from 'react-paginate'\n\t\t//most comfortable way to chunk massive is to use lodash\nimport _ from 'lodash';\nimport SearchBar from './Search/search.js'\nimport AddingPerson from './AddingPerson/addingPerson.js'\nimport ChoosePageSize from './ChoosePageSize/choosePageSize.js'\n\n\t\t//server was inreachable sometimes, so i was performing synthetic tests\nimport array32 from './array32.json'\nimport array1000 from './array1000.json'\n\nclass App extends React.Component{\n\t\t\t//initialisation all base components\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata:[],\n\t\t\tisLoading:false,\n\t\t\tisArraySelected:false,\n\t\t\tsort : 'desc',\n\t\t\tsortKey:'null',\n\t\t\tindex :null,\n\t\t\tcurrentPage:0,\n\t\t\tpageSize:50,\n\t\t\tsearch :'',\n\t\t};\n\t\t\n\t\t\t\t//to provide only Ascending sort on first click\n\t\tthis.sorted = \t{'id':false,\n\t\t\t\t\t\t'firstName':false,\n\t\t\t\t\t\t'lastName':false,\n\t\t\t\t\t\t'email':false,\n\t\t\t\t\t\t'phone':false,\n\t\t\t\t\t\t'address.streetAddress':false,\n\t\t\t\t\t\t'address.city':false,\n\t\t\t\t\t\t'address.state':false,\n\t\t\t\t\t\t'address.zip':false,\n\t\t\t\t\t\t'description':false,\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t}\n\t\n\t\t\t//Async loading data; updating state and stop showing loader; Or catch error and show user that\n\tasync loadData(url) {\n\t\t\n\t\t\n\t\t\n\t\tconst data = (url === 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}')\n\t\t? array32\n\t\t: array1000\n\t\tconsole.log(data);\n\t\t\n\t\t\n\t\t// const data = await fetch(url)\n\t\t// .then((response) => response.json())\n\t\t// .catch(err => alert(\"Сервер недоступен.\")) \n\t\t\t\t\n\t\t\n\t\t// const response = await fetch(url)\n\t\t// const data = await response.json()\t\t\n\t\t\n\t\tthis.setState({\n\t\t\tisLoading:false,\n\t\t\tdata : data\n\t\t})\n\t\t// this.onSort(null,'id');\n\t}\n  \n\t\t\t//Perform Sorting through the key from Table.js\n\tonSort = (event, sortKey) =>{\n\t\t\n\t\tconsole.log(this.state.data);\n\t\tconst isSorted = this.sorted[sortKey];\n\t\tif (!isSorted) {\n\t\t\tfor (let item of Object.keys(this.sorted)){\n\t\t\t\tthis.sorted[item] = false;\n\t\t\t}\t\t\t\n\t\t}\n\t\tlet direction = isSorted ? -1 : 1;\n\t\tconst sortType = direction === 1 ? 'asc' : 'desc';\t\t\n\t\tconst dataSort = this.state.data;\n\t\t\n\t\tdataSort.sort((a,b) => {\n\t\t\treturn a[sortKey] > b[sortKey] ? direction: direction * -1;\n\t\t})\n\t\t\t  this.setState({data : dataSort,\n\t\t\t\t\t\t\tsort: sortType,\n\t\t\t\t\t\t\tsortKey : sortKey\n\t\t\t\t\t\t\t})\n\t\t\t  this.sorted[sortKey] = !isSorted;\n\t}\t\n\t\n\t\n\t\t\t//Assign user index on table's row click to show user's info under the table  in PersonInfo module\n\tshowCharacter = (index) => {\n\t\tthis.setState({index})\n\t}\n\t\n\t\t\t//Letting user choose the size of array and build html structure inside ArraySelected.js\n\tchooseArray = (config) => {\n\t\tthis.setState({\n\t\t\tisArraySelected : true,\n\t\t\tisLoading : true,\n\t\t})\n\t\tthis.loadData(config);\n\t}\n\t\n\t\t\t//We are using ready-made ReactPaginate module to perform pagination(don't have to invent a bike).\n\t\t\t//Updating page number in state\n\tpageChange = ({selected}) => (\n\t\tthis.setState({currentPage : selected})\n\t)\n\t\n\t\t\t//Perform a search in the data and transform the source data to the displayed data\n\tgetParsedData(){\t\t\n\t\tconst {data, search} = this.state;\n\t\tif (!search) {\n\t\t  return data\n\t\t}\n\t\tconsole.log(data);\n\t\tlet temp_value = data.filter(item => {\n\t\t\tconsole.log(typeof item['id']);\n\t\t\treturn (\n\t\t\t\titem[\"id\"].toString().includes(search.toString()) ||\n\t\t\t\titem[\"firstName\"].toLowerCase().includes(search.toLowerCase()) ||\n\t\t\t\titem[\"lastName\"].toLowerCase().includes(search.toLowerCase()) ||\n\t\t\t\titem[\"email\"].toLowerCase().includes(search.toLowerCase()) ||\n\t\t\t\titem[\"phone\"].toString().includes(search.toString())\n\t\t\t);\n\t\t});\n\t\t\t\t\n\t\t// let temp_value = data.map(item => {\n\t\t\t// // let ch_item = item;\n\t\t\t\n\t\t\t// if (\n\t\t\t\t// item[\"id\"].toString().includes(search.toString()) ||\n\t\t\t\t// item[\"firstName\"].toLowerCase().includes(search.toLowerCase()) ||\n\t\t\t\t// item[\"lastName\"].toLowerCase().includes(search.toLowerCase()) ||\n\t\t\t\t// item[\"email\"].toLowerCase().includes(search.toLowerCase()) ||\n\t\t\t\t// item[\"phone\"].toString().includes(search.toString())\n\t\t\t// ){\n\t\t\t\t// let pattern = '(' + search.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\") + ')';\n\t\t\t\t// console.log(pattern);\n\t\t\t\t// let ch_name = item[\"firstName\"].replace(new RegExp(pattern, 'gi'), '<strong>$1<\\/strong>');\n\t\t\t\t// item[\"firstName\"] = ch_name;\n\t\t\t\t// console.log(ch_name);\n\t\t\t\t// return item;\n\t\t\t// }\n\t\t// });\n\t\t\n\t\t// temp_value = temp_value.filter(item => {\n\t\t\t\n\t\t\t// return (\n\t\t\t\t// typeof item !== \"undefined\"\t\t\t\t\n\t\t\t// );\n\t\t// });\n\t\t// console.log(temp_value);\n\t\treturn temp_value\n\t}\n\t\n\t\t\t//Updating current page to perform clean searching and passing search keyword through the search.js module\n\tonSearch = search => {\n\t\tthis.setState({search,currentPage : 0})\n\t}\n\t\n\thandleChangePageSize = (value) => {\n\t\tthis.setState({pageSize:value})\n\t}\n\t\n\t\t\t//Adding new person to the data through addingPerson.js module\n\tsetNewPerson = personality => {\n\t\tthis.setState({data : [personality,...this.state.data]});\n\t}\n\t\n  render(){\n\t\t\t\t{/*Show buttons to let user choose array size */}\n\t\tif (!this.state.isArraySelected)\n\t\t\treturn (<ArraySelected chooseArray={this.chooseArray} />)\n\t\t\n\t\t\n\t\tconst pageSize = 50;\t\t\n\t\tconst parseData = this.getParsedData();\n\t\tconst pageCount = Math.ceil(parseData.length / this.state.pageSize);\n\t\tconst selectedData = _.chunk(parseData,this.state.pageSize)[this.state.currentPage];\n\t\t\n\t\t\n\t\treturn(\n\t\t\n\t\t<div className=\"container\">\n\t\t{\n\t\t\t\n\t\t}\n\t\t\t\t{/*Search bar to appear only after loading */}\n\t\t{\n\t\t\t!this.state.isLoading?\n\t\t\t<SearchBar onSearch = {this.onSearch} />\n\t\t\t:null\n\t\t}\n\t\t\t\t{/*Form to add new person */}\n\t\t{\n\t\t\t!this.state.isLoading\n\t\t\t?\t<AddingPerson setNewPerson = {this.setNewPerson} />\n\t\t\t:null\n\t\t}\t\t\n\t\t\n\t\t\n\t\t{ !this.state.isLoading\n\t\t\t?\t<ChoosePageSize value={this.state.pageSize} handleChangePageSize={this.handleChangePageSize} />\n\t\t\t:null}\n\t\t\n\t\t\t\t{/*Show paginate module only if the size if bigget than pageSize(==50)*/}\n\t\t{\n\t\t\t!this.state.isLoading?\n\t\t\tthis.state.data.length > this.state.pageSize\n\t\t\t? <ReactPaginate\n\t\t\t\tpreviousLabel={'<'}\n\t\t\t\tnextLabel={'>'}\n\t\t\t\tbreakLabel={'...'}\n\t\t\t\tbreakClassName={'break-me'}\n\t\t\t\tpageCount={pageCount}\n\t\t\t\tmarginPagesDisplayed={1}\n\t\t\t\tpageRangeDisplayed={3}\n\t\t\t\tonPageChange={this.pageChange}\n\t\t\t\tcontainerClassName={'pagination'}\n\t\t\t\tactiveClassName={'active'}\n\t\t\t\tpageClassName=\"page-item\"\n\t\t\t\tpageLinkClassName=\"page-link\"\n\t\t\t\tpreviousClassName=\"page-item\"\n\t\t\t\tnextClassName=\"page-item\"\n\t\t\t\tpreviousLinkClassName=\"page-link\"\n\t\t\t\tnextLinkClassName=\"page-link\"\n\t\t\t\tcurrPage={this.state.currentPage}\n\t\t\t/> : null\n\t\t\t:null\n\t\t}\n\t\t\t\t{/*Loading screen and main table then */}\n\t\t{\n\t\t\tthis.state.isLoading\n\t\t\t? <Loader />\n\t\t\t: <React.Fragment>\n\t\t\t<Table characterData = {selectedData} onSort = {this.onSort} showCharacter={this.showCharacter} sort = {this.state.sort} sortKey = {this.state.sortKey} />\n\t\t\t</React.Fragment>\t\t\n\t\t}\n\t\t\t\t\n\t\t\t\t{/*Detailed information about a person by the clicked table's row  */}\n\t\t{this.state.index ? <PersonInfo person = {this.state.index} /> : null}\n\t\t</div>\n\t\t\n\t\t)\n\t}\t\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\t\t  \n\t\t  \nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}